package common

import "github.com/refractionPOINT/go-limacharlie/limacharlie"

// Root of LC webhooks implementing the Extension protocol.
type Message struct {
	// Header always specified.
	Version        uint64 `json:"version" msgpack:"version"`
	IdempotencyKey string `json:"idempotency_key" msgpack:"idempotency_key"`

	// One of the following will be specified.
	HeartBeat        *HeartBeatMessage        `json:"heartbeat,omitempty" msgpack:"heartbeat,omitempty"`
	ErrorReport      *ErrorReportMessage      `json:"error_report,omitempty" msgpack:"error_report,omitempty"`
	ConfigValidation *ConfigValidationMessage `json:"conf_validation,omitempty" msgpack:"conf_validation,omitempty"`
	SchemaRequest    *SchemaRequestMessage    `json:"schema_request,omitempty" msgpack:"schema_request,omitempty"`
	Request          *RequestMessage          `json:"request,omitempty" msgpack:"request,omitempty"`
	Event            *EventMessage            `json:"event,omitempty" msgpack:"event,omitempty"`
}

// Recurring messages used by LimaCharlie to see if an Extension is still available.
type (
	HeartBeatMessage  struct{}
	HeartBeatResponse struct{}
)

// Message indicating an error LimaCharlie encountered.
type ErrorReportMessage struct {
	Error string `json:"error" msgpack:"error"`
	Oid   string `json:"oid,omitempty" msgpack:"oid,omitempty"`
}

// A request to check the validity of an update Extension configuration for an Org.
type ConfigValidationMessage struct {
	Org    OrgAccessData    `json:"org" msgpack:"org"`
	Config limacharlie.Dict `json:"conf" msgpack:"conf"`
}

type ConfigValidationResponse struct{}

// View configuration for the UI display and optional tabs
type View struct {
	Name            string   `json:"name" msgpack:"name"`
	LayoutType      string   `json:"layout_type" msgpack:"layout_type"`
	DefaultRequests []string `json:"default_requests" msgpack:"default_requests"`

	// optional UI view settins: more exist on FE "LayoutOptions" but aren't all exposed via schema
	FieldColumns int `json:"field_columns,omitempty" msgpack:"field_columns,omitempty"`
}

// A request to get the schema required by the Extension for its configuration and requests.
type (
	SchemaRequestMessage  struct{}
	SchemaRequestResponse struct {
		Views          []View         `json:"views,omitempty" msgpack:"views,omitempty"`
		Config         SchemaObject   `json:"config_schema" msgpack:"config_schema"`
		Request        RequestSchemas `json:"request_schema" msgpack:"request_schema"`
		RequiredEvents []EventName    `json:"required_events" msgpack:"required_events"`
	}
)

// A set of org credentials the Extension can use.
type OrgAccessData struct {
	OID   string `json:"oid" msgpack:"oid"`
	JWT   string `json:"jwt" msgpack:"jwt"`
	Ident string `json:"ident" msgpack:"ident"`
}

type ActionName = string

// An action request for the Extension.
type RequestMessage struct {
	Org             OrgAccessData            `json:"org" msgpack:"org"`
	Action          ActionName               `json:"action" msgpack:"action"`
	Data            limacharlie.Dict         `json:"data" msgpack:"data"`
	Config          limacharlie.Dict         `json:"config" msgpack:"config"`
	ResourceState   map[string]ResourceState `json:"resource_state" msgpack:"resource_state"`
	InvestigationID string                   `json:"inv_id" msgpack:"inv_id"`
}

type ResourceState struct {
	LastModified int64 `json:"last_mod" msgpack:"last_mod"`
}

// Used to indicate the Extension wants to be called again in a given amount of
// time in order to continue whatever it's doing.
type ContinuationRequest struct {
	InDelaySeconds uint64           `json:"in_delay_sec" msgpack:"in_delay_sec"`
	Action         ActionName       `json:"action" msgpack:"action"`
	State          limacharlie.Dict `json:"state" msgpack:"state"`
}

// Events are generated by LimaCharlie and cannot be reproduced by users.
type EventMessage struct {
	Org       OrgAccessData    `json:"org" msgpack:"org"`
	EventName EventName        `json:"event_name" msgpack:"event_name"`
	Data      limacharlie.Dict `json:"data" msgpack:"data"`
	Config    limacharlie.Dict `json:"config" msgpack:"config"`
}

// Format of responses from an Extension webhook.
type Response struct {
	Error             string                `json:"error" msgpack:"error"`
	Retriable         *bool                 `json:"retriable,omitempty" msgpack:"retriable,omitempty"` // True if this error is retriable. This only applies to Responses where Error field is set. If not provided, every Response with Error set is considered to be retriable.
	Version           uint64                `json:"version" msgpack:"version"`
	Data              interface{}           `json:"data,omitempty" msgpack:"data,omitempty"`
	SensorStateChange *SensorUpdate         `json:"ssc,omitempty" msgpack:"ssc,omitempty"` // For internal use only.
	Continuations     []ContinuationRequest `json:"continuations,omitempty" msgpack:"continuations,omitempty"`
	Metrics           *MetricReport         `json:"metrics,omitempty" msgpack:"metrics,omitempty"`
}

// Retriable returns true if Reiable field is either not provided (nil) or explicitly set to true.
// This is needed for backward compatibility reasons - for now, we want to retry every request
// which either has Retriable set to true or does not have this field set at all.
func (r *Response) IsRetriable() bool {
	if r.Retriable == nil {
		return true
	}
	return *r.Retriable
}

type EventName = string

// For internal use only.
type SensorUpdate struct {
	SID         string           `json:"sid" msgpack:"sid"`
	CollectorID uint32           `json:"collector_id" msgpack:"collector_id"`
	UpdateTS    uint64           `json:"update_ts" msgpack:"update_ts"`
	Data        limacharlie.Dict `json:"data" msgpack:"data"`
}

// Known event types.
var EventTypes = struct {
	Subscribe   EventName
	Unsubscribe EventName
	Update      EventName
}{
	Subscribe:   "subscribe",
	Unsubscribe: "unsubscribe",
	Update:      "update",
}
